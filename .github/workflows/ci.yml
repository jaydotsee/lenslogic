name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.12']  # Test minimum and latest supported versions

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y exiftool

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install exiftool

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install exiftool

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Lint with ruff (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      run: |
        pip install ruff
        ruff check src/ tests/

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml

    - name: Upload coverage to Codecov (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller lenslogic.spec

    - name: Test executable (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./dist/lenslogic --help

    - name: Test executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\dist\lenslogic.exe --help

    - name: Create versioned artifact name
      id: artifact_name
      run: |
        echo "name=lenslogic-${{ matrix.os }}-$(date +%Y%m%d)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.artifact_name.outputs.name }}
        path: dist/
        retention-days: 30